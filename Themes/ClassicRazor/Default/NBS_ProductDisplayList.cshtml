@inherits NBrightBuy.render.NBrightBuyRazorTokens<NBrightRazor>
@using System.Linq
@using System.Web
@using NBrightDNN
@using Nevoweb.DNN.NBrightBuy.Components;

@AddMetaData("resourcepath", "/DesktopModules/NBright/NBrightBuy/App_LocalResources/")

@AddPreProcessMetaData("itemlistname", Model.GetSetting("itemlistname"), Model.FullTemplateName, Model.ModuleId.ToString())

@AddPreProcessMetaData("searchpagesize", Model.GetSetting("pagesize"), Model.FullTemplateName, Model.ModuleId.ToString())

@AddPreProcessMetaData("orderby", "{bycategoryproduct}", Model.FullTemplateName, Model.ModuleId.ToString()) <!-- set default to manual sort on category product -->

@AddPreProcessMetaData("orderby0", "{bycategoryproduct}", Model.FullTemplateName, Model.ModuleId.ToString())
@AddPreProcessMetaData("orderby1", "NB3.FromPrice", Model.FullTemplateName, Model.ModuleId.ToString())
@AddPreProcessMetaData("orderby2", "NB3.FromPrice DESC", Model.FullTemplateName, Model.ModuleId.ToString())
@AddPreProcessMetaData("orderby3", "NB3.ProductRef", Model.FullTemplateName, Model.ModuleId.ToString())
@AddPreProcessMetaData("orderby4", "NB3.ProductName", Model.FullTemplateName, Model.ModuleId.ToString())

@AddPreProcessMetaData("selectpagesize", "True", Model.FullTemplateName, Model.ModuleId.ToString()) <!-- flag to tell product list a custom pagesize may be applied -->




<!-- Product List header -->

    <div class="nbs">

        <!-- Product List header -->
        @if (Model.GetSettingInt("displaytype") == 0)
        {
           <div class="categorybreadcrumbs">@CategoryBreadCrumb(true, Model)</div>
        }

        <!-- Show category details -->
        <div class="categorydetails">

            @if (Model.List.Count() == 1)
            {
                <h3>@Category("categoryname", Model) @(Category("entrycount", Model))  @(ResourceKey("ProductView.article"))</h3>
            }
            else
            {
                <h3>@Category("categoryname", Model) @(Category("entrycount", Model))  @(ResourceKey("ProductView.articles"))</h3> 
            }
            <i>@(Category("message", Model))</i>
        </div>
		
		<div class="productlistheader">
			<!-- Product sort -->
			<div class="productsort">
				<label>@ResourceKey("General.pagesize") :</label>@PageSizeDropDownList("8,16,32,64,128", Model)
				<label>@ResourceKey("General.OrderBy") :</label>@SortOrderDropDownList("ResourceKey:ProductView.orderby", Model)
			</div>
		</div>

        <div id="listwrapper" class="productlist">

            <!-- Product List Body -->

            @{
                var lang = "";
            }
			
			<div class="addedtobasket" style="display:none;">@ResourceKey("ProductView.addedtobasket")</div>
			
            @foreach (NBrightInfo info in Model.List)
            {
                var product = new ProductData(info.ItemID, info.Lang);
                lang = info.Lang;

                <div class="product" style="width: @(Model.GetSetting("classicitemwidth"))px; height: @(Model.GetSetting("classicitemheight")); margin-bottom: @(Model.GetSetting("classicitembottommargin"))px">
                    <!-- Product container -->

                    <div class="productimg" style="width: @(Model.GetSettingInt("classicitemwidth") - 10)px; height: @(Model.GetSetting("classicitemimagecontainerheight"))">

                        <div class="productimg-overlay">

                            <!-- Add to favorites buttons -->
                            @if (Model.GetSettingBool("enablefavorites"))
                            {
                                <span>
                                    <a class="wishlistadd" listname="@(Model.GetSetting("itemlistname"))" itemid="@(info.ItemID)">@ResourceKey("ProductView.wishlistaddicon-lg")</a>
                                    <a class="wishlistremove" listname="@(Model.GetSetting("itemlistname"))" itemid="@(info.ItemID)" style="display: none;">@ResourceKey("ProductView.wishlistremoveicon-lg")</a>
                                </span>
                            }


                            @if (!Model.GetSettingBool("cataloguemode"))
                            {
                                if (product.Models.Count == 1 && product.Options.Count == 0 && !product.ClientFileUpload)
                                {
                                    <a href="javascript:void(0);" class="addtobasket" itemid="@(info.ItemID)">@ResourceKey("ProductView.addtobasketicon-lg")</a>
                                }
                            }

                            <a href="@EntryUrl(info, Model)">@ResourceKey("ProductView.viewicon-lg")</a>
                        </div>

                        @if (product.Imgs.Count > 0)
                        {
                            <div class="image" style="height: @(Model.GetSetting("classicitemimagecontainerheight"))">
                                <img title="@(info.GetXmlProperty("genxml/lang/genxml/textbox/txtsummary"))" src="@ProductImage(info, Model.GetSetting("classicthumbnailwidth"), Model.GetSetting("classicthumbnailheight"))">
                            </div>
                        }
                        else
                        {
                            <div class="noimage" style="height: @(Model.GetSetting("classicitemimagecontainerheight"))">
                                @(Model.GetSettingHtmlOf("noimageicon"))
                            </div>
                        }

                    </div>

                    <div class="description">
                        <h2><a href="@EntryUrl(info,Model)">@ProductName(info)</a></h2>

                        <div class="price">

                            @if (product.Models.Count > 1)
                            {
                            <span class="from">@ResourceKey("ProductView.from")</span>
                            }

                            @if (product.IsOnSale)
                            {
                                <span class="old">@(NBrightBuyUtils.FormatToStoreCurrency(product.FromPrice()))</span>
                                <span class="sale">@(NBrightBuyUtils.FormatToStoreCurrency(product.BestPrice()))</span>
                            }
                            else
                            {
                                @(NBrightBuyUtils.FormatToStoreCurrency(product.BestPrice()))
                            }
                        </div>

                        @if (product.IsOnSale)
                        {
                            <div class="onsaleflag">@ResourceKey("ProductView.onsaleflag")</div>
                        }

                        @if (!product.IsInStock)
                        {
                            <div class="outofstockflag">@ResourceKey("ProductView.outofstockflag")</div>
                        }
                        @if (product.HasProperty("endofline"))
                        {
                            <div class="outofstockflag">@(ResourceKey("ProductView.endoflineflag"))</div>
                        }
                        @if (product.HasProperty("promotion"))
                        {
                            <div class="onsaleflag">@(ResourceKey("ProductView.promoflag"))</div>
                        }

                    </div>

                    <!-- fields required to send required ajax data to server -->
                    <span class="entryid@(info.ItemID)">
                        <input id="@(info.ItemID)_productid" type="hidden" value="@(info.ItemID)">
                    </span>

                </div>
            }

            <!-- Product List footer -->

        </div>

    </div>
